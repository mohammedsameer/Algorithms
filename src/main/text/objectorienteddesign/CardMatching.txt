package com.leetcode;


import java.util.*;

/**
 * Algo:
 */
public class Program {


    public class CardUtilities {
        List<Card> cards;
        Set<String> cardSet;
        Set<String> cardPrefixSet;
        Map<String, Set<String>> cardPrefixMap;

        public CardUtilities(List<Card> cards) {
            this.cards = cards;
            this.cardSet = new HashSet<>();
            this.cardPrefixSet = new HashSet<>();
            this.cardPrefixMap = new HashMap<>();
        }
    }

    public interface CardEvaluate {
        public String evaluate(CardUtilities cardUtilities);
    }

    public class Card {
        String value;
        Card(String value) {
            this.value = value;
        }
    }

    class CardUniqueMatching implements CardEvaluate {
        @Override
        public String evaluate(CardUtilities cardUtilities) {
            return cardUtilities.cards.size() == cardUtilities.cardSet.size() ? "Unique Cards" : null;
        }
    }

    class CardDuplicateMatching implements CardEvaluate {
        @Override
        public String evaluate(CardUtilities cardUtilities) {
            return cardUtilities.cardSet.size() == 1 ? "Duplicate Cards" : null;
        }
    }

    class CardPrefixMatching implements CardEvaluate {
        @Override
        public String evaluate(CardUtilities cardUtilities) {
            return cardUtilities.cardPrefixSet.size() == 1 ?  "Prefix Match": null;
        }
    }

    class CardPrefixSizeMatching implements CardEvaluate {
        @Override
        public String evaluate(CardUtilities cardUtilities) {
            int count = 0;
            for(Set<String> cardPrefix : cardUtilities.cardPrefixMap.values()) {
                if(count == 0) {
                    count = cardPrefix.size();
                } else if (count != cardPrefix.size()) {
                    return null;
                }
            }

            return "Card Prefix Size Match";
        }
    }

    public void claimHand(List<Card> cards) {
        CardUtilities cardUtilities = new CardUtilities(cards);

        //initialize
        initialize(cardUtilities);

        //compute winner
        String result = computeWinner(cardUtilities);

        if(result != null)
            System.out.println(result);
        else
            System.out.println("Winner Not Found");
    }

    private void initialize(CardUtilities cardUtilities) {
        for (Card card : cardUtilities.cards) {
            cardUtilities.cardSet.add(card.value);
            cardUtilities.cardPrefixSet.add(card.value.substring(0,1));
            cardUtilities.cardPrefixMap.putIfAbsent(card.value.substring(0,1), new HashSet<>());
            cardUtilities.cardPrefixMap.get(card.value.substring(0,1)).add(card.value);
        }
    }

    private String computeWinner(CardUtilities cardUtilities) {
        //Card Unique Matching
        String cardUniqueMatching = new CardUniqueMatching().evaluate(cardUtilities);
        if(cardUniqueMatching != null)
            return cardUniqueMatching;

        //Card Duplicate Matching
        String cardDuplicateMatching = new CardDuplicateMatching().evaluate(cardUtilities);
        if(cardDuplicateMatching != null)
            return cardDuplicateMatching;

        //Card Prefix Matching
        String cardPrefixMatching = new CardPrefixMatching().evaluate(cardUtilities);
        if(cardPrefixMatching != null)
            return cardPrefixMatching;

        //Card Prefix Size Matching
        String cardPrefixSizeMatching = new CardPrefixSizeMatching().evaluate(cardUtilities);
        if(cardPrefixSizeMatching != null)
            return cardPrefixSizeMatching;

        return null;
    }


    public static void main(String[] args) {
    }
}