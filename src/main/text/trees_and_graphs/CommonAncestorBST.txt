//Solution-1
package com.leetcode;


/**
 * CommonAncestorBinarySearchTree
 * Algo:
 *  If root.data > p.data and q.data, then p and q are in left subtree
 *  If root.data < p.data and q.data, then p and q are in right subtree
 *  Exit condition: root.data > p.data and root.data < q.data
 */
public class Program {

    class TreeNode {
        int data;
        TreeNode left;
        TreeNode right;
        TreeNode parent;
        TreeNode(int data) {
            this.data = data;
        }
    }

    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
            while ((root.val - p.val) * (root.val - q.val) > 0) //Note: This will be higher because root.val-p.val is on left side so difference is higher
            //than root.val-q.val
                root = root.val > p.val ? root.left : root.right;
            return root;
     }

    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
            if (root.val > p.val && root.val < q.val)
                return root;
            else if (root.val < p.val && root.val < q.val)
                return lowestCommonAncestor(root.right, p, q);
            else if (root.val > p.val && root.val > q.val)
                return lowestCommonAncestor(root.left, p, q);
            return root;
        }
}