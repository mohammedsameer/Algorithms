package com.leetcode;

import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

/**
 * Algo:
 */
public class Program {

    //States
    public enum States {
        VISITED, UNVISTED;
    }

    //Tree Data Structure
    public class TreeNode {
        TreeNode left;
        TreeNode right;
        States state = States.UNVISTED;
        int data;
        List<TreeNode> children = new ArrayList<>();

        TreeNode(int value) {
            this.data = value;
        }

        public List<TreeNode> getChildren() {
            if(this.left != null)
                children.add(this.left);
            if(this.right != null)
                children.add(this.right);

            return children;
        }
    }

    public boolean BFSSearch(TreeNode start, TreeNode end) {
        if(start == null &&  end == null) {
            return false;
        }

        Stack<TreeNode> stack = new Stack<>();
        stack.push(start);

        //Add start node to stack & then attempt to find end amongst the neighbours
        while (!stack.isEmpty()) {
            //Mark node as visited
            TreeNode node = stack.pop();
            node.state = States.VISITED;

            for(TreeNode neighbour: node.children) {
                if(neighbour.state == States.UNVISTED) {
                    if(start.data == neighbour.data) {
                        return true;
                    }
                    stack.push(neighbour);
                }
            }
        }

        return false;
    }

    public static void main(String[] args) {

    }
}