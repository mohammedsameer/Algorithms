/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
//Algo:
//1.Add root
//2.Recursively call left or right provided they are not null
class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> result = new ArrayList<>();
        if (root == null)
            return result;

        binaryTreePaths(root, result, root.val+"");
        return result;
    }

    public void binaryTreePaths(TreeNode root, List<String> result, String curr) {
        if(root.left==null && root.right==null) {
            result.add(curr);
        } else if (root.right==null) {
            binaryTreePaths(root.left, result, curr + "->" + root.left.val);
        } else if (root.left==null) {
            binaryTreePaths(root.right, result, curr + "->" + root.right.val);
        } else {
            binaryTreePaths(root.left, result, curr + "->" + root.left.val);
            binaryTreePaths(root.right, result, curr + "->" + root.right.val);
        }
    }
}