package com.leetcode;

/**
 * Describe how you could use a single array to implement three stacks
 * Algo:
 * 1. Divide an array into 3 equal halves
 * 2. Push: Check if given stack size is less than max then put
 * 3. Pop: Check if given stack is empty then pop
 * 4. Peep: Return top element
 * 5. isEmpty: Check if stack is empty
 */

public class Stacks {
        int stackSize = 30;
        int[] stackIndex = {-1, (stackSize/3) -1 , (2*stackSize/3) -1};
        int[] stack =  new int[stackSize * 3];

        public void push(int stackNum, int value) {
            int currIndex = stackIndex[stackNum];
            //+1 here helps to advance to beginning of next stack index
            if(currIndex < stackSize * (stackNum + 1) - 1) {
               stack[++currIndex] = value;
               stackIndex[stackNum]++;
           } else {
                //Stack is full
                return;
            }
        }

        public int pop(int stackNum) {
            int currIndex = stackIndex[stackNum];
            int value = -1;
            if(!isEmpty(stackNum)) {
                value = stack[currIndex];
                stackIndex[stackNum]--;
            }
            return value;
        }

        public int peek(int stackNum) {
            int currIndex = stackIndex[stackNum];
            int value = -1;
            if(!isEmpty(stackNum)) {
                value = stack[currIndex];
            }
            return value;
        }

        public boolean isEmpty(int stackNum) {
            //+1 is not used as we want to remain at the beginning of our stack
            int currIndex = stackIndex[stackNum];
            return currIndex <= stackSize * stackNum - 1;
        }
}