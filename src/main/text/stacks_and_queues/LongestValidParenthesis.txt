package com.leetcode;

import java.util.Stack;

/**
 * Algo:
 * 1. If input "(", add on stack
 * 2. else
 * a) if stack is empty always add on stack
 * b) if stack is non-empty, element on top is "(", pop and compute length till now, else add current index on top of stack
 *  (Note: The later is essential to compute the latest length for subsequent iterations)
 */
public class Program {
    public  static int longestValidParentheses(String s) {
     Stack<Integer> stack = new Stack<>();
           int maxLen = 0;

           for(int i=0; i<s.length(); i++) {
               //Open bracket always add on stack
               if(s.charAt(i)== '(') {
                   stack.push(i);
               } else {
                   if(stack.isEmpty()) {
                       //When stack is empty simply add aka you cant form a pair here
                       stack.push(i);
                   } else if (s.charAt(stack.peek()) == '(') {
                       //Found a matching opening pair
                       stack.pop();
                       //If stack is empty we have found all pairs so far so simply i+1, else i-stack.pop()
                       maxLen = Math.max(maxLen, i - (stack.isEmpty() ? -1: stack.peek()));
                   } else {
                       //When two successive '(' in a row, simply add to stack
                       stack.push(i);
                   }
               }
           }
        return maxLen;
    }

    public static void main(String[] args) {
        longestValidParentheses("()()");
    }
}