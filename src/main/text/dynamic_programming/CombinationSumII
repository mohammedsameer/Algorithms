
package com.leetcode;


import java.util.*;

/**
 * Algo:
 * Incrementally add elements to temporary list and check if the current sum = target, if yes add the elements to result
 * Note: This is backtracking because we compute a result and then decide if it satisfies the requirement then either choose
 * to retain or discard
 */
public class Program {
    public static List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<>();
        Arrays.sort(candidates);
        combinationSum(result, new ArrayList<>(), candidates, target, 0);
        return result;
    }

    private static void combinationSum(List<List<Integer>> result, List<Integer> currList, int[] candidates, int remain, int start) {
        //If remain is negative then the current combination does not satisfy
        if(remain < 0) return;
            //If remain = 0, then current combination satisfies the criteria
        else if (remain == 0) result.add(new ArrayList<>(currList));
        else {
            for(int i=start; i<candidates.length; i++) {
                //Current number same as previous and we have already considered candidates[i-1] in sum so skip past i
                if(i>start && candidates[i] == candidates[i-1]) continue;
                //Add a current number
                currList.add(candidates[i]);
                //Continue to next number & subtract target-currNum
                combinationSum(result, currList, candidates, remain - candidates[i], i+1);
                //Remove current number when target-currNum is negative or target-currNum is 0
                currList.remove(currList.size() - 1);
            }
        }
    }

    public static void main(String[] args) {
        combinationSum2(new int[]{1,2,1}, 3);
    }
}