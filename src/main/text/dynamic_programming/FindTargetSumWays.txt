package com.leetcode;

/**
 * Algo:
 * Dynamic programming
 * 1. If the sum of nums does not add up to S, there is no way to reach it
 * 2. The sum of positives and negatives can be divided as follows
 * sum[p] - sum[n] = target
 * sum[p] - sum[n] + sum[p] + sum[n] = target + sum[p] + sum[n]
 * 2*sum[p] = target + sum
 * sum[p] = (target + sum)/2
 */
public class Program {
    public int findTargetSumWays(int[] nums, int S) {
        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
        }
        if(S > sum || (sum + S) % 2 == 1)   return 0;
        return subsetSum(nums, (sum + S) / 2);
    }

    //Same as number of ways to reach sum using coins (non repeated, because we cannot select same element twice)
    private int subsetSum(int[] nums, int sum) {
        int[] dp = new int[sum+1];
        dp[0] = 1;

        for(int num: nums) {
            for(int i=sum; i>=num; i--) {
                dp[i] += dp[i-num];
            }
        }

        return dp[sum];
    }


    public static void main(String[] args) {
    }
}