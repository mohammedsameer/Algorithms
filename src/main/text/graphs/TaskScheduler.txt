//Algo:
//1. Use queue for keeping track of number of occurances a task
//2. Process the queue until wait interval before starting all over again
class Solution {
    public int leastInterval(char[] tasks, int n) {
        Map<Character, Integer> map = new HashMap<>();

        //Add all tasks & their occurances
        for(char c : tasks) {
            map.put(c, map.getOrDefault(c, 0) + 1);
        }

        //Copy the task occurances into queue, we don't care the task names
        //but simply care about number of them
        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> (b-a));
        pq.addAll(map.values());

        int cycles = n + 1; //1 for task & n is the cooling period
        int taskCount;
        int totalTime = 0;
        while(!pq.isEmpty()) {
            taskCount = 0;
            List<Integer> currTasks = new ArrayList<>();
            //Run this n+1, because we cant run same task again
            for(int i=0; i<cycles; i++) {
                //Note: If pq has fewer elements it will be cooling period
                if(!pq.isEmpty()) {
                    currTasks.add(pq.poll());
                    taskCount++;
                }
            }

            //Check if task is complete aka --task if not add back to queue
            for(int task : currTasks) {
                if(--task > 0) {
                    pq.add(task);
                }
            }

            //If queue empty then we had idle time else we processed during all cpu cyles
            totalTime += !pq.isEmpty() ? cycles : taskCount;
        }

        return totalTime;
    }
}