
package com.leetcode;

import java.util.*;

/**
 * Algo:
 * 1. Sort the intervals on start element
 * 2. Iterate over intervals and merge
 */
public class Program {
    public static class Interval {
        int start;
        int end;

        Interval(int start, int end) {
            this.start = start;
            this.end = end;
        }
    }

    public static List<Interval> mergeIntervals(List<Interval> intervals) {
        //Sort intervals on start
        intervals.sort((a,b)-> Integer.compare(a.start , b.start));

        //Merge intervals
        List<Interval> result = new ArrayList<>();
        result.add(intervals.get(0));
        for(int index=1; index<intervals.size(); index++) {
            Interval prev = result.get(result.size()-1);
            Interval curr = intervals.get(index);

            if (prev.end >= curr.start) {
                //Pop up and merge the intervals
                Interval merge = new Interval(prev.start, Math.max(prev.end, curr.end));
                result.remove(result.size()-1);
                result.add(merge);
            } else {
                //No overlap add new entry
                result.add(curr);
            }
        }

        return result;
    }


    public static void main(String[] args) {
        List<Interval> intervals = new ArrayList<>();
        intervals.add(new Interval(1,4));
        intervals.add(new Interval(4,5));
        intervals.add(new Interval(5,10));
        mergeIntervals(intervals);
    }
}