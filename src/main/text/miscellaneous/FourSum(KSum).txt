package com.leetcode;

import java.util.*;

/**
 * Algo:
 */
public class Program {
    static int len = 0;
    public static List<List<Integer>> fourSum(int[] nums, int target) {
        len = nums.length;
        Arrays.sort(nums);
        List<List<Integer>> result = new ArrayList<>();
        Set<List<Integer>> setResult = kSum(nums, target, 4, 0);
        result.addAll(setResult);
        return result;
    }

    private static Set<List<Integer>> kSum(int[] nums, int target, int k, int index) {
        Set<List<Integer>> res = new HashSet<>();
        if(index >= len) {
            return res;
        }

        if(k == 2) {
            //Two sum
            int i = index, j = len - 1;
            while(i < j) {
                //find a pair
                if(nums[i] + nums[j] == target) {
                    List<Integer> curr = new ArrayList<>();
                    curr.add(nums[i]);
                    curr.add(target-nums[i]);
                    res.add(curr);
                    i++;
                    j--;

                } else if (nums[i] + nums[j] < target) {
                    //move left cursor
                    i++;
                } else {
                    //move right cursor
                    j--;
                }
            }
        } else {
            //Next iteration
            for (int i = index; i < len - k + 1; i++) {
                //use current number to reduce ksum into k-1 sum
                //Find k-1 sums
                Set<List<Integer>> curr = kSum(nums, target - nums[i], k-1, i+1);
                if(curr != null){
                    //Add previous results
                    for (List<Integer> c : curr) {
                        //Add the first element
                        c.add(0, nums[i]);
                    }
                    res.addAll(curr);
                }
            }
        }
        return res;
    }

    public static void main(String[] args) {
        fourSum(new int[]{1,0,-1,0,-2,2}, 0);
   }
}
