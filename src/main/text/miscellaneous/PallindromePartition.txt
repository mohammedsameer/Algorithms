
package com.leetcode;


import java.util.*;

/**
 * Algorithm:
 */
public class Program {

    public static List<List<String>> partition(String s) {
        List<List<String>> result = new ArrayList<>();
        List<String> currResult = new ArrayList<>();
        dfs(s,0,currResult,result);
        return result;
    }

    public static void dfs(String s, int pos, List<String> currResult, List<List<String>> result) {
        if(pos==s.length()) {
            result.add(new ArrayList<>(currResult));
        } else {
            for(int i=pos;i<s.length();i++) {
                if(isPalindrome(s,pos,i)) {
                    //If palindrome add to curr result
                    currResult.add(s.substring(pos,i+1));
                    //Recursively call next character
                    dfs(s,i+1,currResult,result);
                    currResult.remove(currResult.size()-1);
                }
            }
        }
    }

    public static boolean isPalindrome(String s, int start, int end) {
        while(start<end) {
            if(s.charAt(start)!=s.charAt(end)) {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }

    /**
     * The main method.
     *
     * @param args the arguments
     */
    public static void main(String[] args) {
        partition("aab");
    }
}