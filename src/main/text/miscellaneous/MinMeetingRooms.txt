package com.leetcode;

import java.util.Arrays;
import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.Queue;

/**
 * Algo:
 * 1. Sort meetings based on start time
 * 2. Start with one meeting room, if the next meeting room overlaps with current meeting increment meeting room
 * Note: Remember to free up meeting rooms once done (Use priority queue)
 */
public class Program {

    public static class Interval {
        int start;
        int end;

        Interval(int start, int end) {
            this.start = start;
            this.end = end;
        }
    }


    public static int minMeetingRooms(Interval[] intervals) {

       Arrays.sort(intervals, (a, b) -> a.start-b.start);
       Queue<Integer> pq = new PriorityQueue<>(); //Priority queue ensure items are ordered
       int count = 1;

       pq.add(intervals[0].end); //Add the first meeting end time, so we can check the next meetings start time

       for (int i=1; i < intervals.length; i++) {
           //Check all remaining meetings and determine if they need a new room or can use existing room
           Interval curr = intervals[i];
           if(curr.start < pq.peek()) {
               count++;
           } else {
               //Looks like preexisting meeting is over remove from queue
               pq.poll();
           }

           //Add the current meeting end time to the queue
           pq.add(curr.end);
       }

       return count;
    }

    public static void main(String[] args) {
        Interval i1 = new Interval(5,10);
        Interval i2 = new Interval(15,20);
        Interval i3 = new Interval(7,12);
        minMeetingRooms(new Interval[] {i1, i2, i3});
    }
}