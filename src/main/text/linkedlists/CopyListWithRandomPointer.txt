/*
// Definition for a Node.
class Node {
    public int val;
    public Node next;
    public Node random;

    public Node() {}

    public Node(int _val,Node _next,Node _random) {
        val = _val;
        next = _next;
        random = _random;
    }
};
*/
//Algo:
//Maintain map of source to copy nodes
class Solution {
    public Node copyRandomList(Node head) {
     if (head == null)
         return null;

      Map<Node, Node> map = new HashMap<Node, Node>();

      // Firs pass: Copy all the nodes
      Node node = head;
      while (node != null) {
        //Store source node to copy node map
        map.put(node, new Node(node.val));

        //Move runner
        node = node.next;
      }

      // Second pass: Assign next and random pointer
      node = head;
      while (node != null) {
        //Assigned source node next to copy node next
        map.get(node).next = map.get(node.next);
        //Assign source node random copy node random
        map.get(node).random = map.get(node.random);

        //Move runner
        node = node.next;
      }

      return map.get(head);
    }
}