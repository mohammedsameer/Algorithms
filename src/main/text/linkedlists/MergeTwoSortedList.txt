package com.leetcode;

import java.util.List;

/**
 * Algorithm
 * 1. If one of the list is empty, then return the other
 * 2. Compare l1.val and l2.val and recursively call the next node
 */
public class Program {

    public class ListNode {
      int val;
      ListNode next;
      ListNode(int x) { val = x; }
    }

    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
      ListNode curr = new ListNode(-1);
      ListNode preHead = new ListNode(-1);
      preHead = curr;
      while (l1!=null && l2!= null) {
          int currVal = -1;
          if(l1.val < l2.val) {
              currVal = l1.val;
              l1 = l1.next;
          } else {
              currVal = l2.val;
              l2 = l2.next;
          }
          curr.next = new ListNode(currVal);
          curr = curr.next;
      }

      while(l1!=null) {
          curr.next = new ListNode(l1.val);
          l1 = l1.next;
          curr = curr.next;
      }

      while(l2!=null) {
          curr.next = new ListNode(l2.val);
          l2 = l2.next;
          curr = curr.next;
      }

      return preHead.next;
    }
}