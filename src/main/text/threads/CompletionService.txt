package com.leetcode;

import java.util.concurrent.*;

class Program {

    static class SumCallable implements Callable<Integer> {

        private int n;

        SumCallable(int n) {
            this.n = n;
        }
        @Override
        public Integer call() throws InterruptedException {
           int sum = 0;
           for(int i=0; i<n; i++) {
               sum+=i;
           }
           Thread.sleep(1000);
           return sum;
        }
    }


    public static void main(String[] nums) {

        ExecutorService threadpool = Executors.newFixedThreadPool(5);
        ExecutorCompletionService service = new ExecutorCompletionService(threadpool);

        for(int i=0; i<10; i++) {
            service.submit(new SumCallable( 5));
        }

        int count = 0;
        while(count != 10) {
            Future<Integer> future = service.poll();
            if(future != null) { //poll returns null is no task is done
                count++;
                System.out.println("Done with task: " + count);
            }
        }

        threadpool.shutdown();
    }

}
