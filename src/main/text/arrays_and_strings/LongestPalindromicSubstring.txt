package com.leetcode;

import java.util.*;

/**
 * Algorithm
 * Expand around center
 * Palindromes can be even (aa) or odd length (aba)
 * Expand around center for (start,end) = (i,i), and (start, end) = (i, i+1)
 */
public class Program {

    public static String longestPalindrome(String s) {
        if(s.isEmpty())
            return s;

        String resultString = "";
        for(int i=0; i < s.length(); i++) {
            String substr1 = pallindromeSubStr(s, i, i);
            String substr2 = pallindromeSubStr(s, i, i+1);

            if(substr1.length() > resultString.length()) {
                resultString = substr1;
            }

            if(substr2.length() > resultString.length()) {
                resultString = substr2;
            }
        }

        return resultString;
    }

    public static String pallindromeSubStr(String s, int start, int end) {
        while(start >= 0 && end < s.length() && s.charAt(start) == s.charAt(end)) {
            start--;
            end++;
        }
        return s.substring(start + 1, end);
    }

    public static void main(String[] args) {
        System.out.println(longestPalindrome("aba"));
        System.out.println(longestPalindrome("sebces"));
    }
}