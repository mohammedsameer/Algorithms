package com.leetcode;

/**
 * Algorithm
 * 1. Iterates the array in both directions and keeps track of running product
 * 2. Compares running product and max
 * Note: Resets prod = 1, when the current number is 0
 */
public class Program {

    public static int maxProduct(int[] nums) {
        if(nums.length == 0)
            return -1;

        int max = Integer.MIN_VALUE;
        int prod = 1;
        //Handles all positives and zero occurrence.
        for(int i = 0; i< nums.length; i++) {
            prod = nums[i] * prod;
            max = Math.max(prod, max);
            if(nums[i] == 0) {
                prod = 1;
            }
        }

        //Handles negative occurrences and therefore evaluates from right.
        prod = 1;
        for(int i = nums.length -1; i>= 0; i--) {
            prod = nums[i] * prod;
            max = Math.max(prod, max);
            if(nums[i] == 0) {
                prod = 1;
            }
        }

        return max;
    }

    public static void main(String[] args) {
        System.out.println(maxProduct(new int[]{-2, 3, -4}));
    }
}