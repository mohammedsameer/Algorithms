package com.leetcode;


/**
 * Algo:
 * 1. Track every character count
 * 2. If count <=k compute max aka, we have at most k characters
 * 3. If count > k and end > start, remove start and reduce count
 */
public class Program {
    public static int lengthOfLongestSubstringKDistinct(String s, int k) {
        int[] map = new int[128];
        int start = 0;
        int end = 0;
        int max = 0;
        int count = 0;
        while (end < s.length()) {
            if (map[s.charAt(end++)]++ == 0) {
                count++;
            }
            if (count <= k) {
                max = Math.max(max, end - start);
            }
            while (end > start && count > k) {
                if (map[s.charAt(start++)]-- == 1) {
                    count--;
                }
            }
        }
        return max;
    }

    public static void main(String[] args) {
        lengthOfLongestSubstringKDistinct("saba", 2);
    }
}