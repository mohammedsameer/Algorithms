package com.leetcode;

/**
 * Algorithm
 * 1. Make two passes
 * Pass 1: Compute the product from left till now (excluding element) (Left to Right)
 * Pass 2: Compute the product from right till now (excluding element) (Right to Left)
 */
public class Program {

    public int[] productExceptSelf(int[] nums) {

       int[] result = new int[nums.length];

       //L->R: All multiples except curr number
       result[0] = nums[0];
       int left = 1;
       for(int i=0; i<nums.length; i++) {
           result[i] = left;
           left = left * nums[i];
       }

       //R->L: Curr result (aka result of all multiples on left) * Right multiple
       //Note: result[nums.length-1] already has right value
       int right = 1;
       for(int i=nums.length-1; i>=0; i--) {
           result[i] = result[i] * right;
           right = right * nums[i];
       }

       return result;
    }
}