package com.leetcode;

/**
 * Algo:
 * Dynamic programming
 * a) If characters match then dp[i][j] = dp[i-1][j-1]
 * b) If characters don't match then dp[i][j] = Math.min(Math.min(dp[i-1][j], dp[i][j-1]), dp[i-1][j-1]) + 1
 */
public class Program {

     public int minDistance(String word1, String word2) {
            int len1 = word1.length();
            int len2 = word2.length();

            int[][] dp = new int[len1+1][len2+1];
            //Fill the first row
            for (int j=0; j<=len2; j++) {
                dp[0][j] = j;
            }
            //Fill the first column
            for(int i=0; i<=len1; i++) {
                dp[i][0] = i;
            }

            for(int i=1; i<=len1; i++) {
                for(int j=1; j<=len2; j++) {
                    if(word1.charAt(i-1) == word2.charAt(j-1)) {
                        //Matching characters at index i and j
                        dp[i][j] = dp[i-1][j-1];
                    } else {
                        //Unmatched characters at index i & j, one transition needed
                        int add = dp[i-1][j];
                        int delete = dp[i][j-1];
                        int replace = dp[i-1][j-1];
                        dp[i][j] = Math.min(Math.min(add, delete),replace)+1;
                    }
                }
            }

            return dp[len1][len2];
        }

    public static void main(String[] args) {
    }
}