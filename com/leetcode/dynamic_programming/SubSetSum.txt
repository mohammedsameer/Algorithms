
package com.leetcode;

/**
 * Algo:
 * Dynamic programming
 * https://www.youtube.com/watch?v=s6FhG--P7z0
 * Rows are made up elements from array and columns are made up of elements from target
 */
public class Program {

    public static boolean subsetSum(int[] nums, int target) {
        boolean[][] dp = new boolean[nums.length+1][target+1];

        for(int c=0; c <=target; c++) {
            //We cannot form any target using zero, except zero (covered below)
            dp[0][c] = false;
        }

        for(int r=0; r <=nums.length; r++) {
            //We can form 0 without using any elements
            dp[r][0] = true;
        }

        for(int r=1; r<=nums.length; r++) {
            for(int c=1; c<=target; c++) {
                if(nums[r-1] > c) {
                    //The array element is larger than target, hence pick the answer from above row
                    dp[r][c] = dp[r-1][c];
                } else {
                    //If it can already be formed using previous numbers or current number and other smaller previous number
                    //E.g r = 3, target is 5 we can form target 5 using 2 & 3.
                    dp[r][c] = dp[r-1][c] || dp[r-1][c-nums[r-1]];
                }
            }
        }

        return dp[nums.length][target];
    }

    public static void main(String[] args) {
     subsetSum(new int[] {1,2,3,4,5}, 11);
    }
}