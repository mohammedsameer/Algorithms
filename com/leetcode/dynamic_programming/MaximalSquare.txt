package com.leetcode;

/**
 * Algo:
 * The maximum square that can be formed at an index is dependent on maximum squares
 * that can be formed at its Top, Left and Top Left indexes
 */
public class Program {

    public static int maximalSquare(char[][] matrix) {

        if(matrix == null || matrix.length == 0 || matrix[0].length == 0)
            return 0;

        int rows = matrix.length;
        int cols = matrix[0].length;
        int[][] dp = new int[rows+1][cols+1];
        int maxEdge = 0;

        for (int r = 1; r <= rows; r++) {
            for(int c = 1; c <= cols; c++) {
                //We do this for 1, because for matrix[r-1][c-1], no square can be formed at that location
                if(matrix[r-1][c-1] == '1') {
                    dp[r][c] = Math.min(Math.min(dp[r-1][c], dp[r][c-1]), dp[r-1][c-1]) + 1;
                    maxEdge = Math.max(maxEdge, dp[r][c]);
                }
            }
        }

        return maxEdge*maxEdge;
    }


    public static void main(String[] args) {
        char[][] matrix = new char[3][3];
        matrix[0][0] = '1';
        matrix[0][1] = '0';
        matrix[0][2] = '0';

        matrix[1][0] = '1';
        matrix[1][1] = '1';
        matrix[1][2] = '1';

        matrix[2][0] = '1';
        matrix[2][1] = '1';
        matrix[2][2] = '1';

        maximalSquare(matrix);
    }
}