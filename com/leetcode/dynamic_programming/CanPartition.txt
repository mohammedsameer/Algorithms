package com.leetcode;

/**
 * Algo:
 * Dynamic programming (Subset problem)
 * https://www.youtube.com/watch?v=s6FhG--P7z0
 * Extension of subset problem, where we first compute if the sum is even and divide it into two and compute if half target can be reached
 * Rows are made up elements from array and columns are made up of elements from target
 */
public class Program {

    public static boolean canPartition(int[] nums) {
       int sum = 0;
       for (int i=0; i< nums.length; i++) {
           sum += nums[i];
       }

       if(sum %2 != 0) {
           return false;
       }

       //Half the sum (Subset problem below)
       int target = sum/2;

       boolean[] dp = new boolean[target+1];
       dp[0] = true;

       for(int num: nums) {
           for(int i=target; i>=num; i--) {
               dp[i] = dp[i] || dp[i-num];
           }
       }

       return dp[target];
    }

    public static void main(String[] args) {
        canPartition(new int[] {1,2,3,4});
    }
}