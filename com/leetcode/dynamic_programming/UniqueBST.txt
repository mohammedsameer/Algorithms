package com.leetcode;

/**
 * Algo:
 * Number of unique tress with n nodes =>
 * 1,...i,....n
 * LeftSubTree(1,..i-1), Root(i), .. RightSubTree(i+1...n)
 * dp[i]+ = dp[number of nodes in lsubtree] * dp[number of nodes in rsubtree
 */
public class Program {
    public int numTrees(int n) {
       //Number of trees with n nodes =
       //1....(i-1), i, (i+1)...n
       //Number of left subtress * Number of right subtrees

       int[] trees = new int[n+1];
       //Number of BST with 0 & 1 node is 1
       trees[0] = 1;
       trees[1] = 1;

       for(int i=2; i<=n; ++i) {
           //Compute number of trees upto n
           for(int j=1; j<=i; ++j) {
               //Number of trees with j as root
               //Number of trees in j-1 nodes * number of trees in i-j
               trees[i] += trees[j-1] * trees[i-j];
           }
       }

       return trees[n];
    }

    public static void main(String[] args) {
    }
}
