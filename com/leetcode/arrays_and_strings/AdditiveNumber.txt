package com.leetcode;

//Algo:
//First Number length i <= (n-1)/2
//Second Number length j
//Third Number length > i & j-i
//Recursively check if Sum of two numbers is Third Number
class Program {

    public static boolean isAdditiveNumber(String num) {
        //Number Range -> [0...n]
        //First Number -> [0..i] <= (n-1)/2 (Because result should be atleast as long as first number)
        //Second Number -> [i..j]
        //Third Number -> [j...n] >= Max(j-i, i) (Because result should atleast be longer than first and second number)
        int n = num.length();

        for(int i=1; i<=(n-1)/2; i++) {
            //Number cannot start with zero
            if(num.charAt(0)=='0' && i>=2) {
                break;
            }

            for(int j=i+1; n-j >= j-i && n-j >= i; j++) {
                //Number cannot start with zero
                if(num.charAt(i)=='0' && j-i>=2) {
                    break;
                }

                long num1 = Long.parseLong(num.substring(0, i)); //First Number
                long num2 = Long.parseLong(num.substring(i, j)); //Second Number
                String sum = num.substring(j); //Third Number

                if(isAdditive(sum, num1, num2))
                    return true;
            }
        }

        return false;
    }

    public static boolean isAdditive(String sum, long num1, long num2) {
        if(sum.isEmpty()) {
            //Exhausted iterations
            return true;
        }

        long currNumSum = num1+num2;
        String currStrSum = String.valueOf(currNumSum);
        if(!sum.startsWith(currStrSum)) {
            //If sum does not start with currStrSum
            return false;
        }
        return isAdditive(sum.substring(currStrSum.length()), num2, currNumSum);
    }



   public static void main(String[] args) {
       isAdditiveNumber("112358");
   }
}
