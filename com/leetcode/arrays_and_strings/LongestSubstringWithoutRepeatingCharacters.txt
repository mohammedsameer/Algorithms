package com.leetcode;

import java.util.*;

package com.leetcode;

import java.util.*;

/**
 * Algorithm
 * Sliding window
 * Use two cursors i and j, move along the string in right direction
 * Add new element if its not already present,
 * Remove left most element if new element already exists
 * Note: This works because at every point in time the set is maintained contains no dupes
 */
public class Program {

    public static int lengthOfLongestSubstring(String str) {
        int result = 0;
        int len = str.length();
        Set<Character> resultSet = new HashSet<>();

        if(len == 0)
            return result;
        int i = 0, j = 0;
        while(i < len &&  j < len) {
            if(!resultSet.contains(str.charAt(j))) {
                resultSet.add(str.charAt(j++));
                result = Math.max(result, j - i);
            } else {
                resultSet.remove(str.charAt(i++));
            }
        }
        return result;
    }

    public static void main(String[] args) {
        System.out.println(lengthOfLongestSubstring("dvdf"));
    }
}

/**
 * Algorithm
 * Use sliding window with the help of stringbuilder
 */
public class Program {

    public int lengthOfLongestSubstring(String s) {
         int max=0;
         StringBuilder sb = new StringBuilder();

         for(char c : s.toCharArray()) {
             if(sb.toString().contains(String.valueOf(c))) {
              sb = new StringBuilder(sb.substring(sb.indexOf(String.valueOf(c))+1));
             }
             sb.append(c);
             max = Math.max(max, sb.length());
         }
         return max;
     }

    public static void main(String[] args) {
        System.out.println(lengthOfLongestSubstring("dvdf"));
    }
}