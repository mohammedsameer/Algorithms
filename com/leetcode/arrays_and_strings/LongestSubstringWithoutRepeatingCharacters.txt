package com.leetcode;

import java.util.*;

package com.leetcode;

import java.util.*;

/**
 * Algorithm
 * Sliding window
 * Use two cursors i and j, move along the string in right direction
 * Add new element if its not already present,
 * Remove left most element if new element already exists
 * Note: This works because at every point in time the set is maintained contains no dupes
 */
public class Program {

    public static int lengthOfLongestSubstring(String str) {
        int result = 0;
        int len = str.length();
        Set<Character> resultSet = new HashSet<>();

        if(len == 0)
            return result;
        int i = 0, j = 0;
        while(i < len &&  j < len) {
            if(!resultSet.contains(str.charAt(j))) {
                resultSet.add(str.charAt(j++));
                result = Math.max(result, j - i);
            } else {
                resultSet.remove(str.charAt(i++));
            }
        }
        return result;
    }

    public static void main(String[] args) {
        System.out.println(lengthOfLongestSubstring("dvdf"));
    }
}

/**
 * Algorithm
 * Bruteforce
 * Loop through all possible substrings and check if the current substring has max length
 */
public class Program {

    public static int lengthOfLongestSubstring(String str) {
        if(str.length() == 0)
            return 0;

        int result = 0;
        for(int i=0; i < str.length() -1; i++) {
            for(int j=i+1; j < str.length(); j++) {
              if(allUnique(str, i, j))  result = Math.max(result, j-i);
            }
        }

        return result;
    }

    public static boolean allUnique(String str, int start, int end) {
        Set<Character> characterSet = new HashSet<>();
        for(int index = start; index <= end; index++) {
            if(characterSet.contains(str.charAt(index))) {
                return false;
            }
            characterSet.add(str.charAt(index));
        }
        return true;
    }

    public static void main(String[] args) {
        System.out.println(lengthOfLongestSubstring("dvdf"));
    }
}