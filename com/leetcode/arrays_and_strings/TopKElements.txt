package com.leetcode;

import java.util.*;

/**
 * Algo:
 * 1. Add elements to map using num as key
 * 2. Transfer elements to tree map using freq as key
 * 3. Return elements up to k
 */
public class Program {

     public static List<Integer> topKFrequent(int[] nums, int k) {
           Map<Integer, Integer> numMap = new HashMap<>();
           TreeMap<Integer, List<Integer>> freqMap = new TreeMap<>();

           for (int num : nums) {
               numMap.put(num, numMap.getOrDefault(num, 0)+1);
           }

           for(Map.Entry<Integer, Integer> entry : numMap.entrySet()) {
               int n = entry.getKey();
               int f = entry.getValue();

              if(!freqMap.containsKey(f)) {
               freqMap.put(f, new ArrayList<>());
               }
              freqMap.get(f).add(n);
           }

           List<Integer> result = new ArrayList<>();
           while(result.size()<k) {
               Map.Entry<Integer, List<Integer>> entry = freqMap.pollLastEntry();
               result.addAll(entry.getValue());
           }

           return result;
       }

    public static void main(String[] args) {
        System.out.println(topKFrequent(new int[]{1,1,1,2,2,3}, 2));
    }
}