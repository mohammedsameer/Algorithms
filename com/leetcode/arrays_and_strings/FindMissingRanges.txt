package com.leetcode;

import java.util.ArrayList;
import java.util.List;

//Algo:
//Find boundary ranges i.e. before and after
//Find in between ranges
class Program {

    public static List<String> findMissingRanges(int[] nums, int lower, int upper) {
        List<String> result = new ArrayList<>();

        if(nums.length == 0)
            return result;

        //Beginning range
        if (nums[0] > lower) {
            result.add(getMissingRange(lower, nums[0]-1));
        }

        //In between range
        for(int i=1; i<nums.length; i++) {
            //The current number is not +1 previous number or is not -1 next number
            if (nums[i-1]+1 != nums[i]) {
              result.add(getMissingRange(nums[i-1]+1, nums[i]-1));
            }
        }

        //After range
        if (nums[nums.length-1] < upper) {
            result.add(getMissingRange(nums[nums.length-1]+1, upper));
        }

        return result;
    }

    public static String getMissingRange(int start, int end) {
        if(start == end) {
            return start + "";
        } else {
            return start + "->" + end;
        }
    }

    public static void main(String[] args) {
        findMissingRanges(new int[]{0, 1, 3, 50, 75}, 0, 99);
    }
}