class Solution {
    public List<Integer> majorityElement(int[] nums) {
        List<Integer> result = new ArrayList<>();

        if(nums.length==0)
            return result;

        int[] count = new int[2];
        int[] x = new int[2];

        //The following loop identifies x[0] & x[1] the majority elements if present
        x[0] = 0;
        x[1] = 1;
        for(int i=0; i<nums.length; i++) {
            if(nums[i] == x[0]) {
                count[0]++;
            }
            else if (nums[i] == x[1]) {
                count[1]++;
            }
            else if (count[0] == 0) {
                x[0] = nums[i];
                count[0] = 1;
            }
            else if (count[1] == 0) {
                x[1] = nums[i];
                count[1] = 1;
            }
            else {
                //Element other than x[0] or x[1], so reduce counts so if next time count is 0 then we can reset with newer number
                count[0]--;
                count[1]--;
            }
        }

        //Confirm the x[0] & x[1] are majority by resetting counts & computing again
        Arrays.fill(count, 0);
        for(int i=0; i<nums.length; i++) {
            if(nums[i] == x[0]) {
                count[0]++;
            }
            else if (nums[i] == x[1]) {
                count[1]++;
            }
        }

        //Add majority elements to result
        int majoritySize = nums.length/3;
        if(count[0] > majoritySize && !result.contains(x[0]))
            result.add(x[0]);
        if(count[1] > majoritySize && !result.contains(x[1]))
            result.add(x[1]);
        return result;
    }
}