package com.leetcode;

import java.util.concurrent.Semaphore;
import java.util.concurrent.locks.ReentrantLock;

class Barbarshop {

    int CHAIRS;
    int waitingCustomers;
    int hairCutsGiven = 0;

    ReentrantLock lock = new ReentrantLock();
    Semaphore waitForCustomerToEnter = new Semaphore(0);
    Semaphore waitForBarbarToFinish = new Semaphore(0);
    Semaphore waitForBarbarToGetReady = new Semaphore(0);
    Semaphore waitForCustomerToLeave = new Semaphore(0);

    public Barbarshop(int CHAIRS) {
        this.CHAIRS = CHAIRS;
    }

    public void barbarCutsHair() throws InterruptedException {
        int index = 1;
        while (index == 1) {
            waitForCustomerToEnter.acquire(); //Waiting for customer
            waitForBarbarToGetReady.release(); //Barbar is ready

            hairCutsGiven++;
            System.out.println("Barbar is cutting hair of " + hairCutsGiven);
            Thread.sleep(100);

            waitForBarbarToFinish.release();//Barbar is free
            waitForCustomerToLeave.acquire(); //Wait for customer to leave
        }
    }

    public void customerEnters() throws InterruptedException {
        lock.lock();
        System.out.println("Count:" + waitingCustomers);
        if(waitingCustomers == CHAIRS) {
            System.out.println("Customer walks out, all chairs occupied occupied");
            lock.unlock();
            return;
        }
        waitingCustomers++;
        lock.unlock();

        waitForCustomerToEnter.release(); //Let barbar know you are here
        waitForBarbarToGetReady.acquire(); //Wait for barbar to complete if he is busy

        //Chair in waiting area is free
        lock.lock();
        waitingCustomers--;
        lock.unlock();

        waitForBarbarToFinish.acquire(); //Wait for barbar to finish haircut
        waitForCustomerToLeave.release(); //Wait for customer to leave
    }
}

class Program {

    public static void main(String[] args) throws InterruptedException {
        Barbarshop barbarshop = new Barbarshop(3);

        Thread customer1 = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    barbarshop.customerEnters();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });

        Thread customer2 = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    barbarshop.customerEnters();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });

        Thread customer3 = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    barbarshop.customerEnters();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });

        Thread customer4 = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    barbarshop.customerEnters();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });

        Thread barbar = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    barbarshop.barbarCutsHair();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });

        barbar.start();
        customer1.start();
        customer2.start();
        customer3.start();
        customer4.start();

        customer1.join();
        customer2.join();
        customer3.join();
        customer4.join();
        barbar.join();
    }
}
