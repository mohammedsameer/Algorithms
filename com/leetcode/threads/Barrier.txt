package com.leetcode;

class Barrier {
    int totalThreads;
    int currThreads;
    int released;

    public Barrier(int totalThreads) {
        this.totalThreads = totalThreads;
    }

    public synchronized void await() throws InterruptedException {
        System.out.println(Thread.currentThread().getName() + " is entering await");

        //Prevent the nth thread to re-entering before n-1 threads have completed
        while (currThreads == totalThreads) {
            wait();
        }

        currThreads++;

        if(currThreads == totalThreads) {
            System.out.println(Thread.currentThread().getName() + " is notifying other threads");
            notifyAll();
            released = totalThreads;
        } else {
            while (currThreads < totalThreads) {
                wait();
            }
        }

        //currThreads is 0 only when all the n threads have decremented released
        released--;
        if(released == 0) {
            currThreads = 0;
            System.out.println(Thread.currentThread().getName() + " has released all threads");
            notifyAll(); //Notifies any threads waiting in while loop at the beginning
        }
    }
}
class Program {

    public static void main(String[] args) throws InterruptedException {
        Barrier barrier = new Barrier(3);

        Thread thread1 = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    barrier.await();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });

        Thread thread2 = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    barrier.await();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });

        Thread thread3 = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    barrier.await();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });

        thread1.start();
        thread2.start();
        thread3.start();

        thread1.join();
        thread2.join();
        thread3.join();
    }
}
