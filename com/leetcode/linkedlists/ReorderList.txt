/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
//Algo:
//1. Divide the list into half.
//2. Reverse the second list
//3. Insert the second list into list
//Note: O(n)
public class Solution {
    public void reorderList(ListNode head) {

     if(head==null ||  head.next==null || head.next.next==null)
     {
         return;
     }

     ListNode fast = head;
     ListNode slow = head;

     while(fast.next!=null && fast.next.next!=null)
     {
         slow = slow.next;
         fast = fast.next.next;
     }

     //divided lists
     ListNode head1 = head;
     ListNode head2 = slow.next;
     slow.next = null;

     head2 = reverse(head2);
     while(head1!=null && head2!=null)
     {
        ListNode nexth1 = head1.next;
        ListNode nexth2 = head2.next;
        head1.next = head2;
        head2.next = nexth1;
        head1 = nexth1;
        head2 = nexth2;
     }

   }


   //Reverse the linked list
   public ListNode reverse(ListNode head)
   {
       ListNode prev = null;
       ListNode curr = head;

       while(curr!=null)
       {
          ListNode next = curr.next;
          curr.next = prev;
          prev = curr;
          curr = next;
       }

       return prev;
   }
}