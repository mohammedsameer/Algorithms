package com.leetcode;

/**
 * Write code to remove duplicates from an unsorted linked list without using additional buffer
 * //Algo:
 * 1. Two pointers left and right to the preHead
 * 2. Move right n times so there is a gap of n b/w left and right
 * 3. Move both left and right until right.next is null, then left.next will be the nth element from end
 */
public class Program {

    class ListNode {
        int data;
        ListNode next;
        ListNode(int data) {
            this.data = data;
        }
    }

     public ListNode removeNthFromEnd(ListNode head, int n) {
          ListNode preHead = new ListNode(-1);
          preHead.next = head;
          ListNode left = preHead;
          ListNode right = preHead;

          while(n!=0 && right.next!=null) {
              right = right.next;
              n--;
          }

          while(right.next!= null) {
              left = left.next;
              right = right.next;
          }

          left.next = left.next.next;
          return preHead.next;
      }

    public static void main(String[] args) {
    }
}