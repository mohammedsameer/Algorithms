package com.leetcode;

/**
 * Algorithm
 * 1. Compute the length of each of two lists
 * 2. Move the cursor of longer list to match the size of smaller list
 * 3. Move both the cursors in unison to find intersecting node
 */
public class Program {

    public class ListNode {
    int val;
    ListNode next;
    ListNode(int x) {
         val = x;
         next = null;
     }
    }

    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
            ListNode result = null;
            ListNode curr = null;
            int aLen = 0;
            int bLen = 0;

            curr = headA;
            while(curr != null) {
                aLen++;
                curr = curr.next;
            }

            curr = headB;
            while(curr != null) {
                bLen++;
                curr = curr.next;
            }

            //Move the large list by aLen-bLen
            ListNode p = headA;
            ListNode q = headB;
            if(aLen>bLen) {
                int diff = aLen - bLen;
                while(diff != 0) {
                    p = p.next;
                    diff--;
                }
            } else if(bLen>aLen) {
                int diff = bLen - aLen;
                while(diff != 0) {
                    q = q.next;
                    diff--;
                }
            } else {
                //Do nothing as lists are same length
            }

            //Iterate and find intersecting node
            while(p != null && q != null) {
                if(p == q) {
                    result = p;
                    break;
                }
                p = p.next;
                q = q.next;
            }

            return result;
    }

    public static void main(String[] args) {
        System.out.println();
    }
}