package com.leetcode;

/**
 * Algorithm
 * 1. Compute the length of each of two lists
 * 2. Move the cursor of longer list to match the size of smaller list
 * 3. Move both the cursors in unison to find a match
 */
public class Program {

    public class ListNode {
    int val;
    ListNode next;
    ListNode(int x) {
         val = x;
         next = null;
     }
    }

    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if(headA == null || headB == null)
            return null;

        int aLen=0, bLen=0;
        ListNode curr = headA;
        while (curr != null) {
            aLen++;
            curr = curr.next;
        }

        curr = headB;
        while (curr != null) {
            bLen++;
            curr = curr.next;
        }

        ListNode p1 = headA;
        ListNode p2 = headB;
        if(aLen > bLen) {
            int diff = aLen - bLen;
            while (diff != 0) {
                p1 = p1.next;
                diff--;
            }
        }
        if (bLen > aLen) {
            int diff = bLen - aLen;
            while (diff != 0) {
                p2 = p2.next;
                diff--;
            }
        }

        while (p1!=null && p2!=null) {
            if(p1.val != p2.val) {
                p1 = p1.next;
                p2 = p2.next;
            } else {
                return p1;
            }
        }

        return null;
    }

    public static void main(String[] args) {
        System.out.println();
    }
}