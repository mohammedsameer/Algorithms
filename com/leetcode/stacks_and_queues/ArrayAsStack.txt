package com.leetcode;

/**
 * Describe how you could use a single array to implement three stacks
 * Algo:
 * 1. Divide an array into 3 equal halves
 * 2. Push: Check if given stack size is less than max then put
 * 3. Pop: Check if given stack is empty then pop
 * 4. Peep: Return top element
 * 5. isEmpty: Check if stack is empty
 *
 */

public class Program {

    public class Stacks {
        int stackSize = 30;
        int[] stackIndex = {-1, (stackSize/3) -1 , (2*stackSize/3) -1};
        int[] stack =  new int[stackSize * 3];

        public void push(int stackNum, int value) {
            if(stackIndex[stackNum] < stackSize * (stackNum + 1) - 1) {
                int index = stackIndex[stackNum] + 1;
                stack[index] = value;
                stackIndex[stackNum]++;
            } else {
                return;
            }
        }

        public int pop(int stackNum) {
            if(!isEmpty(stackNum)) {
                int index = stackIndex[stackNum];
                stackIndex[stackNum]--;
                return stack[index];
            } else {
                return  -1;
            }
        }

        public int peek(int stackNum) {
            return stack[stackNum];
        }

        public boolean isEmpty(int stackNum) {
           return stackIndex[stackNum] == stackNum * stackSize - 1;
        }
    }
}