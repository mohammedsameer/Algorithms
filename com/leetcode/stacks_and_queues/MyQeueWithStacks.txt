package com.leetcode;

import java.util.Stack;

/**
 * Implement a queue using two stacks
 * Algorithm
 * Maintain two stacks S1 and S2
 * Add: Always add elements to S1
 * Remove: Remove first element of S2, if S2 is empty pop all elements of S1 over to S2
 */
class Program {

    class MyQueue<T> {
        Stack<T> primary;
        Stack<T> secondary;
        MyQueue() {
            primary = new Stack<>();
            secondary = new Stack<>();
        }

        public void add(T data) {
            primary.push(data);
        }

        public T remove() {
            if(!secondary.isEmpty()) {
                return secondary.pop();
            }

            while (!primary.isEmpty()) {
                secondary.push(primary.pop());
            }
            return secondary.pop();
        }

        public T peek() {
            if(!secondary.isEmpty()) {
                return secondary.peek();
            }

            while (!primary.isEmpty()) {
                secondary.push(primary.pop());
            }
            return secondary.peek();
        }
    }

}


//Alternate by tweaking only push
class MyQueue {

    Stack<Integer> primaryStack;

    /** Initialize your data structure here. */
    public MyQueue() {
        primaryStack = new Stack<>();
    }

    /** Push element x to the back of queue. */
    public void push(int x) {
        Stack<Integer> reOrderStack = new Stack<>();
        while(!primaryStack.isEmpty()) {
            reOrderStack.push(primaryStack.pop());
        }
        primaryStack.push(x);
        while(!reOrderStack.isEmpty()) {
            primaryStack.push(reOrderStack.pop());
        }
    }

    /** Removes the element from in front of queue and returns that element. */
    public int pop() {
       return primaryStack.pop();
    }

    /** Get the front element. */
    public int peek() {
        return primaryStack.peek();
    }

    /** Returns whether the queue is empty. */
    public boolean empty() {
        return primaryStack.isEmpty();
    }
}

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * boolean param_4 = obj.empty();
 */