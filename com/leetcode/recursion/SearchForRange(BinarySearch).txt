package com.leetcode;

/**
 * Search for a Range
 * Algorithm
 * Use binary search to locate the element, then you compute the left and right boundaries
*/
public class Program {

  class Solution {
      public int[] searchRange(int[] nums, int target) {
          int start = 0;
          int end = nums.length - 1;

          while(start<=end) {
              int mid = (start+end)/2;
              if (target == nums[mid]) {
                  //Check on either sides
                  int left = mid;
                  int right = mid;

                  //left bound
                  while(left>=0 && target==nums[left]) {
                      left = left-1;
                  }

                  //right bound
                  while(right<nums.length && target==nums[right]) {
                      right = right+1;
                  }

                  return new int[]{left+1, right-1};

              } else if (target > nums[mid]) {
                  start=mid+1;
              } else {
                  end=mid-1;
              }
          }

          return new int[]{-1, -1};
      }
  }

    public static void main(String[] args) {
        System.out.println(searchRange(new int[] {5,7,7,8,8,10}, 8));
    }
}