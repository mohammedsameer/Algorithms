
package com.leetcode;


/**
 * Algorithm
 * 11110
 * 11010    -> Output 1
 * 11000
 * 00000
 *
 * 11000
 * 11000    -> Output 3
 * 00100
 * 00011
 *
 * Loop through the grid, for every island count++, and attempt to visit all adjacent lands to form a bigger island
 *
 */
public class Program {
    char[][] mygrid;
    int rows;
    int cols;
    public int numIslands(char[][] grid) {
        if(grid==null)
            return 0;

        //Check boundary conditions
        int rows = grid.length;
        if(rows==0) return 0;
        int cols = grid[0].length;
        int count = 0;

        //Locate islands
        for(int r=0; r<rows; r++) {
            for(int c=0; c<cols; c++) {
                if(grid[r][c] == '1') {
                    count++; //Found an island
                    markNeighbours(grid, r, c, rows, cols);
                }
            }
        }

        return count;
    }

    //Makes small island a large island
    public void markNeighbours(char[][] grid, int r, int c, int rows, int cols) {
        if(r>=rows || c>=cols || r<0 || c<0 || grid[r][c] != '1')
            return;

        grid[r][c] = '0';
        markNeighbours(grid, r+1, c, rows, cols);
        markNeighbours(grid, r-1, c, rows, cols);
        markNeighbours(grid, r, c+1, rows, cols);
        markNeighbours(grid, r, c-1, rows, cols);
    }

    public static void main(String[] args) {
        System.out.println();
    }
}