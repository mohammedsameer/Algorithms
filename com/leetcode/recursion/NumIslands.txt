
package com.leetcode;


/**
 * Algorithm
 * 11110
 * 11010    -> Output 1
 * 11000
 * 00000
 *
 * 11000
 * 11000    -> Output 3
 * 00100
 * 00011
 *
 * Loop through the grid, for every island count++, and attempt to visit all adjacent lands to form a bigger island
 *
 */
public class Program {
    char[][] mygrid;
    int rows;
    int cols;
    public int numIslands(char[][] grid) {
        if(grid == null)
            return 0;

        mygrid = grid;
        rows = grid.length;
        cols = grid[0].length;
        int count = 0;

        for(int r = 0; r < rows; r++) {
            for( int c = 0; c < cols; c++) {
                if(grid[r][c] == '1') {
                    count++;
                    markNeighbours(r, c);
                }
            }
        }

        return count;
    }

    private void markNeighbours(int r, int c) {
        if(r < 0 || r >= rows || c < 0 || c >= cols || mygrid[r][c] != '1')
            return;

        mygrid[r][c] = '0';
        markNeighbours(r+1, c);
        markNeighbours(r-1, c);
        markNeighbours(r, c+1);
        markNeighbours(r, c-1);
    }

    public static void main(String[] args) {
        System.out.println();
    }
}