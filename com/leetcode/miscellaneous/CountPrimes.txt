package com.leetcode;


package com.leetcode;

//Solution - 1 (Optimal)
/**
 * Algorithm
 * Loop through and identify primes.
 * For optimization if number is identified as prime, mark all its multiples as not prime
 */
public class Program {

    public static int countPrimes(int n) {
        if(n < 2)
            return 0;

        //Initialize everything as primes, then reset to true
        boolean[] notPrimes = new boolean[n];
        int count = 0;
        for(int i = 2; i < n; i++) {
            if(!notPrimes[i]) {
                count++;
                for(int j = 2; i * j < n; j++) {
                    notPrimes[i*j] = true;
                }
            }
        }
        return count;
    }

    public static void main(String[] args) {
        System.out.println(countPrimes(14));
    }
}

//Solution - 2
/**
 * Algorithm
 */
public class Program {

    public static int countPrimes(int n) {
        if(n<2)
            return 0;

        int count = 0;
        for(int i=2; i<n; i++) {
            if(isPrime(i))
                count++;
        }
        return count;
    }

    public static boolean isPrime(int n) {

        for(int i=2; i<=n/2; i++) {
            if(n%i==0)
                return false;
        }
        return true;
    }

    public static void main(String[] args) {
        System.out.println(countPrimes(14));
    }
}