//Algo:
//buy[i] -> MaxProfit at index i with buy as last transaction
//sell[i] -> MaxProfit at index i with sell as last transaction

//buy[i]-> At index i, you can either rest or buy. If you choose to buy then last sell should have happened i-2, reason there is a cooling period at i-1
//sell[i] -> At index i you can either rest or sell. If you choose to sell then last buy should have happened i-1, reason buy before sell
//You only depend on i, i-1 and i-2

//Note: s0, s1 & s2 is result at index i, i-1, i-2
//Note: b0, b1 is result at index i, i-1

class Solution {
    public int maxProfit(int[] prices) {
        int len = prices.length;
        if(prices.length==0)
            return 0;


        int b0 = -prices[0]; //Max profit at 0 is -prices[0]
        int b1 = b0;
        int s0 = 0;
        int s1 = 0;
        int s2 = 0;
        for(int i=1; i<prices.length; i++) {
            b0 = Math.max(b1, s2-prices[i]);
            s0 = Math.max(s1, b1+prices[i]);
            s2 = s1;
            s1 = s0;
            b1 = b0;
        }

        return s0;
    }
}