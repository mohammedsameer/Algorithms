package com.leetcode;

import java.util.ArrayList;
import java.util.List;
//TODO: Revisit
/**
 * Algorithm
 * 1. Compute all substrings
 * 2. Check if every substring is palindrome, if yes add to result list
 * */
public class Program {

    public static List<List<String>> partition(String s) {
        if(s.isEmpty())
            return new ArrayList<>();

        int currLen = 1;
        List<List<String>> result = new ArrayList<>();
        //Iterate over for every length until the string length
        while (currLen <= s.length()) {

            List<String> curr = new ArrayList<>();
            for(int start=0; start < s.length(); start++) {
                int end = start + currLen > s.length() ? s.length(): start + currLen;
                String subString = s.substring(start, end);
                if(isPalindrome(subString))
                    curr.add(subString);
            }

            if(!curr.isEmpty()) {
                result.add(curr);
            }

            currLen++;
        }

        return result;
    }

    public static boolean isPalindrome(String s) {
        if(s.isEmpty())
            return true;

        s = s.replaceAll("[^a-zA-Z0-9]", "").toLowerCase();
        int mid = s.length()/2;
        for(int i = 0; i < mid; i++) {
            if(s.charAt(i) != s.charAt(s.length() - 1 - i)) {
                return false;
            }
        }

        return true;
    }

    public static void main(String[] args) {
        System.out.println(partition("aab"));
    }
}
