package com.leetcode;

/**
 * Algorithm
 * 1. Steps keep track of current num[i]
 * 2. If currJump > maxJump, reset maxJump. If you reach the currEnd then reset currEnd with maxJump
 * 3. If currEnd is > nums.length then it implies we can reach the end
 */
public class Program {

    public static boolean canJump(int[] nums) {
        int currJump = 0;
        int currEnd = 0;
        int maxJump = Integer.MIN_VALUE;

        for(int i=0; i<nums.length-1; i++) {
            currJump = i + nums[i];

            if(maxJump < currJump) {
                maxJump = currJump;
            }

            //If i have managed another bigger jump before reaching currEnd then reset currEnd to maxJump
            if(i==currEnd) {
                currEnd = maxJump;
            }
        }

        return currEnd >= nums.length-1;
    }

    public static void main(String[] args) {
        System.out.println(canJump(new int[]{2,1,0,0,4,3}));
    }
}