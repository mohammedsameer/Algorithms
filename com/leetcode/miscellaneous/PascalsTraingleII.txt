package com.leetcode;

import java.util.ArrayList;
import java.util.List;

/**
 * Algorithm
 * 1. Same as Pascals traingle, except use an rows index i.e. 4rd row has 3nd index
 */
public List<Integer> getRow(int rowIndex) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> currRow = new ArrayList<>();

        if(rowIndex<0)
            return currRow;

        currRow.add(1);
        result.add(currRow);
        //index to track rows
        int n = 0;
        while(n<rowIndex) {
            n++;
            List<Integer> prevRow = new ArrayList<>(currRow);
            currRow = new ArrayList<>();
            for(int i=0; i<(n+1); i++) {
                if(i==0 || i==prevRow.size()) {
                     //Boundary index
                    currRow.add(1);
                } else {
                    //Add elements from previous row
                    currRow.add(prevRow.get(i-1) + prevRow.get(i));
                }
            }

            result.add(currRow);
        }

        return result.get(n);
    }