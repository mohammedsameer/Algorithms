package com.leetcode;


/**
 * Algorithm
 * Perform binary search on the array on min length array
 * Every iteration partitions the array such that we have equal left and right halves
 *
 * partitionX + partitionY = (x+y+1)/2
 * If match
 * maxLeftX <= minRightY and maxLeftY <= minRightX
 * else if maxLeftX > minRightY
 * move towards left in X
 * else
 * move towards right in X
 */
public class Program {

    public static double findMedianSortedArrays(int[] num1, int[] num2) {
        //if input1 length is greater than switch them so that input1 is smaller than input2.
        if (num1.length > num2.length) {
            return findMedianSortedArrays(num2, num1);
        }
        int x = num1.length;
        int y = num2.length;

        int low = 0;
        int high = x;
        while (low <= high) {
            //Find the index to partition the x
            int partitionX = (low + high)/2;
            //Find the index to partition the y (aka second array)
            int partitionY = (x + y + 1)/2 - partitionX;

            //if partitionX is 0 it means nothing is there on left side. Use -INF for maxLeftX
            //if partitionX is length of input then there is nothing on right side. Use +INF for minRightX
            int maxLeftX = (partitionX == 0) ? Integer.MIN_VALUE : num1[partitionX - 1];
            int minRightX = (partitionX == x) ? Integer.MAX_VALUE : num1[partitionX];

            int maxLeftY = (partitionY == 0) ? Integer.MIN_VALUE : num2[partitionY - 1];
            int minRightY = (partitionY == y) ? Integer.MAX_VALUE : num2[partitionY];

            if (maxLeftX <= minRightY && maxLeftY <= minRightX) {
                //We have partitioned array at correct place
                // Now get max of left elements and min of right elements to get the median in case of even length combined array size
                // or get max of left for odd length combined array size.
                if ((x + y) % 2 == 0) {
                    return ((double)Math.max(maxLeftX, maxLeftY) + Math.min(minRightX, minRightY))/2;
                } else {
                    return (double)Math.max(maxLeftX, maxLeftY);
                }
            } else if (maxLeftX > minRightY) { //we are too far on right side for partitionX. Go on left side.
                high = partitionX - 1;
            } else { //we are too far on left side for partitionX. Go on right side.
                low = partitionX + 1;
            }
        }

        //Only we we can come here is if input arrays were not sorted. Throw in that scenario.
        throw new IllegalArgumentException();
    }

    public static void main(String[] args) {
        int[] num1 = {1,2,7,9,14,15};
        int[] num2 = {6,8,12,16,17,18,19};
        System.out.println(findMedianSortedArrays(num1, num2));
    }
}