//Solution - 1
package com.leetcode;

import java.util.ArrayList;
import java.util.List;

/**
 * Algorithm
 * 1. Start with empty list
 * 2. Loop through all elements of array and add them at all possible positions of prev element
 */
public class Program {
    public static List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();

        if(nums == null || nums.length == 0)
            return result;

        //Add empty list to result
        result.add(new ArrayList<>());

        for(int i=0; i <nums.length; i++) {
            List<List<Integer>>  currResult = new ArrayList<>();

            //Iterate over every prev in current result and add nums[i] at all position
            for(List<Integer> prev : result) {

                //Indexed from 0 to len, as we need to add to the end
                for(int j=0; j<= prev.size(); j++) {
                    List<Integer> curr = new ArrayList<>(prev);
                    curr.add(j, nums[i]);
                    currResult.add(curr);
                }
            }
            result = currResult;
        }

        return result;
    }

    public static void main(String[] args) {
        System.out.println(permute(new int[] {1,2,3}));
    }
}

//Solution - 2 (Backtracking)
package com.leetcode;

import java.util.ArrayList;
import java.util.List;

/**
 * Algo:
 * 1. Add an element to templist, check if templist size == nums size, if yes add to result else move to next element
 * Note: Make sure when you add elements to temp list the list does not already have the same element
 */
public class Program {
    public static List<List<Integer>> permutations(int[] nums) {
      List<List<Integer>> result = new ArrayList<>();
      backtrack(result, new ArrayList<>(), nums);
      return result;
    }

    private static void backtrack(List<List<Integer>> result, ArrayList<Integer> tempList, int[] nums) {
        if(tempList.size() == nums.length) {
            result.add(new ArrayList<>(tempList));
        } else {
            for(int i=0; i< nums.length; i++) {
                if(!tempList.contains(nums[i])) {
                    tempList.add(nums[i]);
                    backtrack(result, tempList, nums);
                    tempList.remove(tempList.size() - 1);
                }
            }
        }
    }

    public static void main(String[] args) {
        permutations(new int[] {2,3,4});
    }
}