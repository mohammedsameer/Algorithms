package com.leetcode;

/**
 * Algorithm
 * 1. Identify the size of list
 * 2. Identify the size of each part i.e. count/k & remainder
 * 3. Loop through the partition the list using above parameters
 */
public class Program {

     public static class ListNode {
         int val;
         ListNode next;
         ListNode(int x) { val = x; }
     }

    public static ListNode[] splitListToParts(ListNode root, int k) {

        int count = 0;
        ListNode curr = root;
        //Length of list
        while (curr != null) {
            count++;
            curr = curr.next;
        }

        ListNode[] result = new ListNode[k];
        int partSize = count / k, remainder = count % k;
        int currPartSize = 0;

        int index = 0;
        curr = root;
        while (index < k) {
            ListNode head = curr;
            while (currPartSize < partSize + (index < remainder ? 1 : 0) -1) {
                if(curr != null) curr = curr.next;
                currPartSize++;
            }

            if (curr != null) {
                ListNode prev = curr;
                curr = curr.next;
                prev.next = null;
            }

            result[index] = head;
            currPartSize = 0;
            ++index;
        }

        return result;
    }

    public static void main(String[] args) {

       ListNode node1 = new ListNode(1);
       ListNode node2 = new ListNode(2);
       ListNode node3 = new ListNode(3);
       ListNode node4 = new ListNode(4);
       ListNode node5 = new ListNode(5);
       ListNode node6 = new ListNode(6);
       ListNode node7 = new ListNode(7);
       node1.next = node2;
       node2.next = node3;
       node3.next = node4;
       node4.next = node5;
       node5.next = node6;
       node6.next = node7;
       System.out.println(splitListToParts(node1, 3));
    }
}