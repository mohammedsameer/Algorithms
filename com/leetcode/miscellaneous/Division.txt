
//Solution1
package com.leetcode;

/**
 * Algorithm
 * Subtract divisor from dividend until a) dividend is zero or b) dividend  is smaller than divisor
 * Note: This does not completely handle all the MAX and MIN edge cases
*/
public class Program {

    public static int divide(int dividend, int divisor) {

        int negativeMultiplier = 1;
        if(dividend == 0)
            return 0;

        if(divisor == 0)
            return Integer.MAX_VALUE;

        if(dividend < 0 && divisor < 0) {
            dividend = dividend * -1;
            divisor = divisor * -1;
        } else if(dividend < 0) {
            dividend = dividend * -1;
            negativeMultiplier = -1;
        } else if(divisor < 0) {
            divisor = divisor * -1;
            negativeMultiplier = -1;
        }

        int multiplier = 0;
        while(dividend >= divisor) {
            dividend = dividend - divisor;
            ++multiplier;
        }

        return multiplier * negativeMultiplier;
    }

    public static void main(String[] args) {
        System.out.println(divide(18, 2));
    }
}


//Solution2
package learning.main;

/**
 * The Class Solution.
 */
public class Solution {

	/**
	 * Divide.
	 * 
	 * @param dividend
	 *            the dividend
	 * @param divisor
	 *            the divisor
	 * @return the int
	 */
	public static long divide(int dividend, int divisor) {

		long result = 0;

		if (dividend == 0)
			return (int)result;

		if (divisor == 0)
			return Integer.MAX_VALUE;

		long num = Math.abs((long)dividend);
		long deno = Math.abs((long)divisor);

		while (num >= deno) {
			int i = 0;
			long ndeno = deno;
			while (num >= ndeno) {
				num = num - ndeno;
				ndeno = ndeno << 1;
				result += 1 << i;
				i++;
			}
		}

		if ((dividend < 0 && divisor < 0) || (dividend > 0 && divisor > 0))
		{
			//Result positive
			if(Math.abs(result)>Integer.MAX_VALUE)
			 result = Integer.MAX_VALUE;
			 
			return result;
		}
		else
		{
			//Result negative
			if(Math.abs(result)<Integer.MIN_VALUE)
			 result = Integer.MIN_VALUE;
			return -result;
		}
			
	}

	/**
	 * The main method.
	 * 
	 * @param args
	 *            the arguments
	 */
	public static void main(String[] args) {
		System.out.println("Division :" + divide(-2147483648, -1));

	}
}

