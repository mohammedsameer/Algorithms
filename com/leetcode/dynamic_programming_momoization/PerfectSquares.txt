package com.leetcode;

import java.util.Arrays;

/**
 * Algo
 * 1. Loop through up to n and compute perfect squares using DP
 * a) Base Conditions dp[0] = 0,
 * b) Computation
 * dp[1] = dp[0] + 1
 * dp[2] = dp[1] + 1
 * dp[3] = dp[2] + 1
 * dp[4] = Math.min(dp[3]+1, dp[0]+1), Because loop runs twice
 * dp[5] = Math.min(dp[4]+1, dp[1]+1), Because loop runs twice
 */
public class Program {

    public static int numSquares(int n) {
        int[] dp = new int[n + 1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for(int i = 1; i <= n; ++i) {
            int min = Integer.MAX_VALUE;
            for(int j= 1; j*j<= i; j++) {
                min = Math.min(min, dp[i - j*j] + 1);
            }

            dp[i] = min;
        }
        return dp[n];
    }

    public static void main(String[] args) {
        numSquares(12);
    }
}