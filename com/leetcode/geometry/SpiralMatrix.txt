
//Algo: Loop through array as
// Left to Left
// Top to Bottom
// Right to Left
// Bottom to Top
// Note: After each iteration completion increase index & check if it exceeds the bounds
public class Solution {
    class Solution {
        public List<Integer> spiralOrder(int[][] matrix) {

            boolean leftToRight = true;
            boolean topToBottom = true;
            List<Integer> result = new ArrayList<>();

            if(matrix.length==0 || matrix[0].length==0)
                return result;

            int rows = matrix.length;
            int cols = matrix[0].length;

            int rBIndex=0;
            int rEIndex=rows-1;
            int cBIndex=0;
            int cEIndex=cols-1;

            while(true) {

                //Left to right
                for(int c=cBIndex; c<=cEIndex; c++)
                    result.add(matrix[rBIndex][c]);

                //Note: Increment the constant i.e. in above its rBIndex & check boundary condition
                if(++rBIndex>rEIndex)
                    break;

                //Top to bottom
                 for(int r=rBIndex; r<=rEIndex; r++)
                    result.add(matrix[r][cEIndex]);

                 //Note: Decrement the constant i.e. in above its cEIndex & check boundary condition
                 if(--cEIndex<cBIndex)
                    break;

                //Right to left
                for(int c=cEIndex; c>=cBIndex; c--)
                    result.add(matrix[rEIndex][c]);

                //Note: Decrement the constant i.e. in above its rEIndex & check boundary condition
                if(--rEIndex<rBIndex)
                    break;

                //Bottom to top
                for(int r=rEIndex; r>=rBIndex; r--)
                   result.add(matrix[r][cBIndex]);

                //Note: Increment the constant i.e. in above its cBIndex & check boundary condition
                if(++cBIndex>cEIndex)
                    break;
            }

            return result;
        }
    }
}