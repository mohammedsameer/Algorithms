package com.leetcode;


import java.util.Stack;

/**
 * Algo:
 * 1. Move from 0 to n rows such that at every row we compute maximal area
 * 2. Note: As we move b/w rows,
 * a) if the current value is already non-zero or zero, & if the new row element is non-zero then we add
 * b) if the current value is already non-zero, & if new row element is zero then we reset to 0 (Reason: The building/structure does not grow)
 */
public class Program {


    public static int maximalRectangle(char[][] matrix) {
        if(matrix == null)
            return 0;

        int rows = matrix.length;
        int cols = matrix[0].length;
        int[] heights = new int[cols];
        int max = 0;
        for(int r = 0; r < rows; r++) {
            for( int c = 0; c < cols; c++) {
                if(matrix[r][c] == '0') {
                    heights[c] = 0;
                } else {
                    heights[c] += 1;
                }
            }
            max = Math.max(max, largestRectangleArea(heights));
        }
        return max;
    }

    public static int largestRectangleArea(int[] heights) {
        if(heights.length == 0)
            return 0;

        Stack<Integer> stack = new Stack<>();
        int i = 0;
        int max = Integer.MIN_VALUE;
        while (i<heights.length) {
            if(stack.isEmpty() || heights[i] > heights[stack.peek()]) {
                stack.push(i);
                i++;
            } else {
                int h = heights[stack.pop()];
                int w = stack.isEmpty()?i:i-1-stack.peek();
                max = Math.max(max, h*w);
            }
        }

        while (!stack.isEmpty()) {
            int h = heights[stack.pop()];
            int w = stack.isEmpty()?i:i-1-stack.peek();
            max = Math.max(max, h*w);
        }

        return max;
    }

    public static void main(String[] args) {
        char[][] matrix = new char[4][5];
        matrix[0][0] = '1';
        matrix[0][1] = '0';
        matrix[0][2] = '0';
        matrix[0][3] = '1';
        matrix[0][4] = '0';

        matrix[1][0] = '1';
        matrix[1][1] = '0';
        matrix[1][2] = '1';
        matrix[1][3] = '1';
        matrix[1][4] = '1';

        matrix[2][0] = '1';
        matrix[2][1] = '1';
        matrix[2][2] = '1';
        matrix[2][3] = '1';
        matrix[2][4] = '1';


        matrix[3][0] = '1';
        matrix[3][1] = '0';
        matrix[3][2] = '0';
        matrix[3][3] = '1';
        matrix[3][4] = '0';
        maximalRectangle(matrix);
    }
}