//Solution-1
package com.leetcode;

/**
 * Algorithm
 * Recursively go to left and right
 */
public class Program {

    public static class TreeNode {
        int val;
        TreeNode left;
        TreeNode right;
        TreeNode(int x) { val = x; }
    }

    public static TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if (root == null || root == p || root == q)
            return root;
        TreeNode left = lowestCommonAncestor(root.left, p, q);
        TreeNode right = lowestCommonAncestor(root.right, p, q);
        return left != null && right != null ? root: left == null ? right : left;
    }

    public static void main(String[] args) {
        TreeNode root = new TreeNode(7);
        TreeNode left = new TreeNode(4);
        TreeNode right = new TreeNode(3);
        TreeNode p = new TreeNode(5);
        TreeNode q = new TreeNode(6);
        right.left = p;
        right.right = q;
        root.left = left;
        root.right = right;
        lowestCommonAncestor(root, p, q);
    }
}


//Solution - 2
package com.leetcode;

/**
 * CommonAncestorBinarySearchTree
 * Algo:
 *  If root.data > p.data and q.data, then p and q are in left subtree
 *  If root.data < p.data and q.data, then p and q are in right subtree
 *  Exit condition: root.data > p.data and root.data < q.data
 */
public class Program {

    class TreeNode {
        int data;
        TreeNode left;
        TreeNode right;
        TreeNode parent;
        TreeNode(int data) {
            this.data = data;
        }
    }

    public TreeNode commonAncestorBinarySearchTree(TreeNode root, TreeNode p, TreeNode q) {
        if(root == null)
            return null;

        if(root.data > p.data && root.data > q.data)
            commonAncestorBinarySearchTree(root.left, p, q);

        if(root.data < p.data && root.data < q.data)
            commonAncestorBinarySearchTree(root.right, p, q);

        //This is the condition when root.data > p.data and root.data < q.data (ancestor)
        return root;
    }
}