package com.leetcode;

import java.util.*;

/**
 * Algo:
 * 1. Track all neighbours from source as map (DataStructure)
 * 2. Use priority queue for tracking shortest distance (Iteration)
 * 3. For every node add all neighbours to PQ with total distance as distance + distance for ride from curr to next
 */
public class Program {

    public static int findCheapestPrice(int n, int[][] flights, int src, int dst, int K) {
        Map<Integer, Map<Integer, Integer>> map = new HashMap<>();
        for (int[] flight : flights) {
            map.putIfAbsent(flight[0], new HashMap<>());
            map.get(flight[0]).put(flight[1], flight[2]);
        }

        //Sort by flight time
        Queue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        pq.add(new int[] {0, src, K + 1});


        while (!pq.isEmpty()) {
            int[] top = pq.poll();
            int price = top[0];
            int city = top[1];
            int stops = top[2];

            //If we have reached destination return the price
            if (city == dst)
                return price;

            //Iterate from curr to next provided we have stops left
            if (stops > 0) {
                Map<Integer, Integer> curr = map.getOrDefault(city, new HashMap<>());
                for (int next : curr.keySet()) {
                    //Add every neighbour unlike finding the nearest (BFS)
                    pq.add(new int[] {price + curr.get(next), next, stops - 1});
                }
            }
        }
        return -1;
    }

    public static void main(String[] args) {
        int[][] flights = new int[][] {{0,1,100}, {1,2,100}, {0,2,500}};
        findCheapestPrice(3, flights , 0, 2, 0);
    }

}