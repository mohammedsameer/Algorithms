package com.leetcode;


import java.util.*;

/**
 * Algo:
 */
public class Program {
    public static int networkDelayTime(int[][] times, int N, int K) {
        Map<Integer, Map<Integer, Integer>> map = new HashMap<>();

        //Add source, destination and time into map
        for(int[] time : times) {
            if(!map.containsKey(time[0])) {
                map.put(time[0], new HashMap<>());
            }
            map.get(time[0]).put(time[1], time[2]);
        }

        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0]-b[0]); //Storing in ascending order means we process the farthest node last
        pq.add(new int[]{0, K}); //Add source
        boolean[] visited = new boolean[N+1];
        int result = 0;

        while(!pq.isEmpty()) {
            int[] curr = pq.poll();
            int currTime = curr[0];
            int currNode = curr[1];

            //mark visited
            if(visited[currNode]) continue;
            visited[currNode] = true;
            N--;
            result = currTime;

            if(map.containsKey(currNode)) {
                for(Integer next : map.get(currNode).keySet()) {
                    Integer prevTime = map.get(currNode).get(next);
                    Integer newTime = currTime + prevTime;
                    pq.add(new int[] {newTime, next}); //New time of next node
                }
            }
        }

        return N != 0? -1 : result;
    }
    public static void main(String[] args) {
        int[][] times = {{2, 1, 1}, {2, 3, 1}, {3, 4, 1}};
        networkDelayTime(times, 4, 2);
    }
}