/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
//Algo: Iterate through both left and right subtrees and match the x & y val. Key: Keep track of parent as well.
class Solution {
    TreeNode xParent = null;
    TreeNode yParent = null;
    int xDepth = 0;
    int yDepth = 0;
    public boolean isCousins(TreeNode root, int x, int y) {
        if(root==null)
            return false;

        isCousinsHelper(root, null, 0, x, y);
        return xDepth == yDepth && xParent != yParent;
    }

    public void isCousinsHelper(TreeNode root, TreeNode parent, int currDepth, int x, int y) {
        if(root==null)
            return;

        if(root.val == x) {
            xDepth = currDepth;
            xParent = parent;
        } else if (root.val == y) {
            yDepth = currDepth;
            yParent = parent;
        }

        isCousinsHelper(root.left, root, currDepth+1, x, y);
        isCousinsHelper(root.right, root, currDepth+1, x, y);
    }
}