/**
 */
//Algo: PreOrder traversal to serialize and deserialize
public class Codec {

    String SPLITTER = ",";
    String NULL_VALUE = "N";

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        StringBuilder sb = new StringBuilder();
        serialize(sb, root);
        return sb.toString();
    }

    public void serialize(StringBuilder sb, TreeNode root) {
        if(root==null)
            sb.append(NULL_VALUE).append(SPLITTER);
        else {
            sb.append(root.val).append(SPLITTER);
            serialize(sb, root.left);
            serialize(sb, root.right);
        }
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        //Add all data into queue
        Queue<String> queue = new LinkedList<>(Arrays.asList(data.split(SPLITTER)));
        return deserialize(queue);
    }

    public TreeNode deserialize(Queue<String> queue) {
        String curr = queue.poll();
        if(curr.equals(NULL_VALUE))
            return null;
        TreeNode root = new TreeNode(Integer.parseInt(curr));
        root.left = deserialize(queue);
        root.right = deserialize(queue);
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));