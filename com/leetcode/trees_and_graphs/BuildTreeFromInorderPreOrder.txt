package com.leetcode;

/**
 * Algorithm
 * Recursion
 * 1. root = preOrder[preStart], therefore iterate inorder until inorder[k] == root
 * 2. Recursively call buildTree with start and end for each of preorder and inorder arrays
 */
public class Program {

 public class TreeNode {
      int val;
      TreeNode left;
      TreeNode right;
      TreeNode(int x) { val = x; }
 }

    public TreeNode buildTree(int[] preorder, int[] inorder) {
     if(preorder.length == 0 || inorder.length == 0)
         return null;

     return buildTree(0, preorder.length-1, preorder, 0, inorder.length -1, inorder);
    }

    private TreeNode buildTree(int preStart, int preEnd, int[] preorder, int inStart, int inEnd, int[] inorder) {
     if(preStart > preEnd || inStart > inEnd)
         return null;

     int k = 0;
     TreeNode root = new TreeNode(preorder[preStart]);
      while (inorder[k] != root.val) {
         ++k;
       }

     //Length of left subtree is k - instart (Reason: k is at root aka mid)
     root.left = buildTree(preStart+1, preStart+1+k-inStart-1, preorder, inStart, k-1, inorder);
     root.right = buildTree(preStart+1+k-inStart-1+1, preEnd, preorder, k+1, inEnd, inorder);
     return root;
    }


    public static void main(String[] args) {
       System.out.println();
    }
}