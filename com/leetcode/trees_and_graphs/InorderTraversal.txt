package com.leetcode;

import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

/**
 * Algorithm
 * Push all nodes until the left most node & then pop node and move to their right
 */
public class Program {

    public class TreeNode {
        int val;
        TreeNode left;
        TreeNode right;
        TreeNode(int x) { val = x; }
     }

    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        Stack<TreeNode> stack = new Stack<>();

        TreeNode curr = root;
        //Run the loop until both stack is empty and curr is null
        while(!stack.isEmpty() || curr != null) {
            if(curr != null) {
                //If curr is not null then keep adding to stack and move to the left
                stack.push(curr);
                curr = curr.left;
            } else {
                //If curr is null then we have reached end of left branch so pop prev node (aka prev root), add
                // to result and move to its right
                TreeNode prev = stack.pop();
                result.add(prev.val);
                curr = prev.right;
            }
        }

        return result;
    }

    public static void main(String[] args) {
       System.out.println();
    }
}