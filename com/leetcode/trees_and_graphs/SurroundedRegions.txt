
//Ago:
//1. Iterate the boundary rows and cols and set to 0 to *
//2. Iterate the board and simply set all remaining 0's to X to *'s to 0
class Solution {
      public void solve(char[][] board) {
        //Empty board condition
        if (board.length == 0 || board[0].length == 0) return;
        //Board smaller than 2 elements
        if (board.length < 2 || board[0].length < 2) return;

        int rows = board.length;
        int cols = board[0].length;

        // 0th col and cols-1th col with 0 cant be marked X, so if 0 then convert to *
        for (int r = 0; r < rows; r++) {
            if (board[r][0] == 'O') helper(board, r, 0);
            if (board[r][cols - 1] == 'O') helper(board, r, cols - 1);
        }

       // 0th row and rows-1th row with 0 cant be marked X, so if 0 then convert to *
       // Note: Iterate from col 1 to n-1 because we have already computed col 0 and col n
        for (int c = 1; c < cols - 1; c++) {
            if (board[0][c] == 'O') helper(board, 0, c);
            if (board[rows - 1][c] == 'O') helper(board, rows - 1, c);
        }

        // Set all remaining 0's to X & *'s' to 0
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < cols; c++) {
                if (board[r][c] == 'O') board[r][c] = 'X';
                if (board[r][c] == '*') board[r][c] = 'O';
            }
        }
    }

    private void helper(char[][] board, int r, int c) {
        //If board is 0 & within boundary mark *, do the same for its surrounding because its surrounding cannot be X
        if (r < 0 || c < 0 || r > board.length - 1 || c > board[0].length - 1 || board[r][c] != 'O') return;
        board[r][c] = '*';
        helper(board, r + 1, c);
        helper(board, r - 1, c);
        helper(board, r, c + 1);
        helper(board, r, c - 1);
    }
}