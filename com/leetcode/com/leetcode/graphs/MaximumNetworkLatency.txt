package com.leetcode;

import java.util.*;

/**
 * Algo:
 * 1. Map of source -> destinations (destinations ordered in reverse order of latency)
 * 2. Loop through the graph from source till destination
 * 3. Compute maximum path sum once you have traversed from source to destination
 * (Note: Because your ordering reverse by latency a node once visited will have highest latency)
 */
public class Program {

    public static int bfs(int[][] intervals, int source, int destination) {
        Map<Integer, Map<Integer, Integer>> map = new HashMap<>();

        //Initialize map with source and destinations ordered by priority of higher latency
        for(int[] interval : intervals) {
            map.putIfAbsent(interval[0], new HashMap<>());
            map.get(interval[0]).put(interval[1], interval[2]);
        }

        //Iterate through graph from source until destination
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> b[0]-a[0]); //Storing in ascending order means we process the farthest node last
        pq.add(new int[] {0, source});

        while (!pq.isEmpty()) {
            int[] next = pq.poll();
            int cDelay = next[0];
            int cSource = next[1];

            if(cSource == destination)
                return cDelay;

            if(map.containsKey(cSource)) {
                Map<Integer, Integer> nextMap = map.get(cSource);
                for (int k : nextMap.keySet()) {
                    //Update time
                    int nDelay = nextMap.get(k);
                    pq.add(new int[] {cDelay + nDelay, k});
                }
            }
        }

        return -1;
    }

    public static void main(String[] args) {
        bfs(new int[][]{{1, 2, 10}, {2, 3, 20}, {1, 3, 40}}, 1, 3);
    }
}