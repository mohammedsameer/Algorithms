package com.leetcode;

import java.util.LinkedList;
import java.util.Queue;

//Algo:
//BFS you move from every node until you hit a wall
//Note: Use directions array for tracking left, right, up & down movements
class Program {

    public boolean hasPath(int[][] maze, int[] start, int[] destination) {
        boolean[][] visited = new boolean[maze.length][maze[0].length];
        Queue<int[]> queue = new LinkedList<>();
        int[][] dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        queue.add(start);
        while (!queue.isEmpty()) {
            int[] curr = queue.poll();

            if(curr[0] == destination[0] && curr[1] == destination[1])
                return true;

            //Check all directions from current
            for (int[] dir : dirs) {
               //Move in a direction
               int x = start[0] + dir[0];
               int y = start[1] + dir[1];

               //Continue moving until we hit a wall
               while (x>=0 && y>=0 && x<maze.length && y<maze[0].length && maze[x][y] == 0) {
                   x += dir[0];
                   y += dir[1];
               }

               //Take a step back because we have hit the wall
               if(!visited[x-dir[0]][y-dir[1]]) {
                   queue.add(new int[] {x-dir[0],y-dir[1]});
                   visited[x-dir[0]][y-dir[1]] = true;
               }
            }
        }

        return false;
    }

    public static void main(String[] args) {
    }
}
