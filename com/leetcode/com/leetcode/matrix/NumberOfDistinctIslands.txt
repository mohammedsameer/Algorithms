
package com.leetcode;

import java.util.HashSet;
import java.util.Set;

/**
 * Algo:
 */
public class Program {

     public static int numDistinctIslands(int[][] grid) {

        //Base condition
        if(grid == null || grid.length == 0 || grid[0].length == 0)
            return 0;

        Set<String> islands = new HashSet<>();
        //From every cell move along up, down, right, left
        for (int r=0; r<grid.length; r++) {
            for (int c=0; c<grid[0].length; c++) {
                if (grid[r][c] == 1) {
                    //Track traversal
                    StringBuilder sb = new StringBuilder();
                    numDistinctIslandsHelper(grid, r, c, sb, "");
                    islands.add(sb.toString());
                }
            }
        }

        return islands.size();
    }

    private static void numDistinctIslandsHelper(int[][] grid, int r, int c, StringBuilder sb, String dir) {
        if (r < 0 || r >= grid.length || c < 0 || c >= grid[0].length || grid[r][c] == 0)
            return;

        //Mark visited by resetting grid (Note: Resetting grid because visited is not enough to add or you should use sb.length before adding
        grid[r][c] = 0;

        //Track direction
        sb.append(dir);

        //Navigate up, down, right, left
        numDistinctIslandsHelper(grid, r+1, c, sb, "D");
        numDistinctIslandsHelper(grid, r-1, c, sb, "U");
        numDistinctIslandsHelper(grid, r, c+1, sb, "R");
        numDistinctIslandsHelper(grid, r, c-1, sb, "L");

        //Mark end
        sb.append("#");
    }

    public static void main(String[] args) {
        int[][] grid = new int[3][3];

        grid[0][0] = 1;
        grid[0][1] = 1;
        grid[0][2] = 0;

        grid[1][0] = 1;
        grid[1][1] = 1;
        grid[1][2] = 0;

        grid[2][0] = 0;
        grid[2][1] = 0;
        grid[2][2] = 1;

        System.out.println(numDistinctIslands(grid));
    }
}